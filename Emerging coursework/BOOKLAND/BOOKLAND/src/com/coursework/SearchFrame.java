/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.coursework;

import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hp
 */
public class SearchFrame extends javax.swing.JFrame {

    ArrayList al;
    DefaultTableModel rowData, searchRowData;

    public SearchFrame() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        Searchlabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        PriceSearch = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        ComboBoxCategory = new javax.swing.JComboBox<>();
        CategorySearch = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();
        ReturnHomeButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DataRecordTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        BookLandLabel = new javax.swing.JLabel();
        Slogan = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Import = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        ManualGuide = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        jMenuItem5.setText("jMenuItem5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BOOK LAND ");

        jPanel1.setBackground(new java.awt.Color(154, 185, 115));

        Searchlabel.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        Searchlabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coursework/icons/Search-icon.png"))); // NOI18N
        Searchlabel.setText("Search");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Search by Price:");

        PriceSearch.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        PriceSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coursework/icons/Search-icon.png"))); // NOI18N
        PriceSearch.setText("Search Book");
        PriceSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriceSearchActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Search by Category:");

        ComboBoxCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Biography", "Fantasy", "Mystery", "Poetry", "Kid" }));

        CategorySearch.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        CategorySearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coursework/icons/Search-icon.png"))); // NOI18N
        CategorySearch.setText("Search by Category");
        CategorySearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategorySearchActionPerformed(evt);
            }
        });

        ClearButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ClearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coursework/icons/Clear-icon.png"))); // NOI18N
        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        ReturnHomeButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ReturnHomeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coursework/icons/home-icon.png"))); // NOI18N
        ReturnHomeButton.setText("Return Home");
        ReturnHomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnHomeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addGap(10, 10, 10)
                        .addComponent(jTextFieldSearch))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ComboBoxCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(Searchlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(ClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addComponent(ReturnHomeButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(CategorySearch)
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(PriceSearch)
                .addGap(67, 67, 67))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Searchlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(PriceSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(34, 34, 34)
                .addComponent(CategorySearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(ClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addComponent(ReturnHomeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(154, 185, 115));
        jPanel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        DataRecordTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Name", "Category", "Author", "Editions", "price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(DataRecordTable);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Data Record");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        BookLandLabel.setFont(new java.awt.Font("Harrington", 1, 28)); // NOI18N
        BookLandLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coursework/icons/Bookland.png"))); // NOI18N
        BookLandLabel.setText("Book Land");

        Slogan.setFont(new java.awt.Font("Segoe Script", 1, 16)); // NOI18N
        Slogan.setText("A book worm’s paradise...");

        File.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coursework/icons/File-icon.png"))); // NOI18N
        File.setText("File");

        Import.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Import.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coursework/icons/Excel-icon.png"))); // NOI18N
        Import.setText("Import Excel");
        Import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportActionPerformed(evt);
            }
        });
        File.add(Import);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coursework/icons/close-icon.png"))); // NOI18N
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        jMenuBar1.add(File);

        Help.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coursework/icons/help.png"))); // NOI18N
        Help.setText("Help");

        ManualGuide.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        ManualGuide.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/coursework/icons/guide-icon.png"))); // NOI18N
        ManualGuide.setText("User Manual Guide");
        ManualGuide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManualGuideActionPerformed(evt);
            }
        });
        Help.add(ManualGuide);

        jMenuBar1.add(Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BookLandLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Slogan)
                .addGap(186, 186, 186))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(BookLandLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Slogan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        setBounds(460, 100, 764, 689);
    }// </editor-fold>//GEN-END:initComponents

    private void ReturnHomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnHomeButtonActionPerformed
        // TODO add your handling code here:
        Homeframe home_frame = new Homeframe();
        home_frame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ReturnHomeButtonActionPerformed

    private void ManualGuideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManualGuideActionPerformed
        File file = new File("src\\Help\\User Manual Guide.pdf");
        try {
            Desktop.getDesktop().open(file);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "File not found");
        }
    }//GEN-LAST:event_ManualGuideActionPerformed

    private void ImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportActionPerformed
        String filename;
        JFileChooser choose = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("files", "csv", "txt");
        choose.setFileFilter(filter);
        choose.showOpenDialog(null);
        File f = choose.getSelectedFile();
        filename = f.getAbsolutePath();

        try {
            FileReader fr = new FileReader(filename);
            BufferedReader br = new BufferedReader(fr);

            DefaultTableModel model = (DefaultTableModel) DataRecordTable.getModel();
            Object[] lines = br.lines().toArray();

            for (int i = 0; i < lines.length; i++) {
                String[] line = lines[i].toString().split(",");
                model.addRow(line);
            }
            JOptionPane.showMessageDialog(rootPane, "Data sucessfully imported from a .csv file.", "Successfully Imported from file path", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "File not found", "Error 404", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ImportActionPerformed

    private boolean numberVerification(String number) {
        try {
            int i = Integer.parseInt(number);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    public void sort() {
        for (int i = 0; i < al.size(); i++) {
            int minPosition = minPositionFinder(al, i);
            swap(al, minPosition, i);
        }
    }

    public int minPositionFinder(ArrayList al, int from) {
        int m = from;
        ArrayList tempa = (ArrayList) al.get(from);
        for (int i = from + 1; i < al.size(); i++) {
            ArrayList tempal = (ArrayList) al.get(i);
            if (Integer.parseInt((String) tempa.get(5)) > Integer.parseInt((String) tempal.get(5))) {
                tempa = tempal;
                m = i;
            }
        }
        return m;
    }

    public void swap(ArrayList al, int minPos, int from) {
        ArrayList swapList = (ArrayList) al.get(minPos);
        al.set(minPos, al.get(from));
        al.set(from, swapList);
    }

    public static int binarySearch(ArrayList a, int low, int high, int find) {
        if (low <= high) {
            int mid = (low + high) / 2;
            if (Integer.parseInt(a.get(mid).toString()) == find) {
                return mid;
            } else if (Integer.parseInt(a.get(mid).toString()) < find) {
                return binarySearch(a, mid + 1, high, find);
            } else if (Integer.parseInt(a.get(mid).toString()) > find) {
                return binarySearch(a, low, mid - 1, find);
            }
        } else {
            return -1;
        }
        return 0;
    }

    private void PriceSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PriceSearchActionPerformed
        try {//checking for nulls
            if (jTextFieldSearch.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Fill all the text fields or select one option from edition", "Error!", JOptionPane.ERROR_MESSAGE);
            } else {
                if (Integer.parseInt(jTextFieldSearch.getText()) < 1)//checking for zero or negative values
                {//checking for negative input
                    JOptionPane.showMessageDialog(this, "Please input valid values in the field !!", "Error!", JOptionPane.ERROR_MESSAGE);
                } else {

                    String searchPrice = jTextFieldSearch.getText();
                    Boolean isNumeric = numberVerification(searchPrice);
                    ArrayList sortedPriceArray;

                    if (isNumeric == true) {
                        //Fetching row and column count from the table
                        int rowCount = DataRecordTable.getRowCount();
                        int colCount = DataRecordTable.getColumnCount();

                        //Initializing a new arraylist al
                        al = new ArrayList();
                        for (int i = 0; i < rowCount; i++) {
                            ArrayList tempAl = new ArrayList();
                            for (int j = 0; j < colCount; j++) {
                                //Adding details from the table jTable1 to the arrayList
                                tempAl.add(DataRecordTable.getValueAt(i, j));
                            }
                            //Adding the temporary arraylist tempAl main ArrayList al
                            al.add(tempAl);
                        }
                        //Calling sort method for selection sorting of the price
                        this.sort();
                        //Creating a new arraylist that stores sorted price values
                        sortedPriceArray = new ArrayList();

                        for (int i = 0; i < al.size(); i++) {
                            ArrayList tempal = (ArrayList) al.get(i);
                            //Fetching price from the fourth index of tempAl to create array of sorted price
                            sortedPriceArray.add(tempal.get(5));
                        }

                        int find = Integer.parseInt(jTextFieldSearch.getText());
                        int low = 0;
                        int high = sortedPriceArray.size() - 1;
                        //Calling binarySearch method in index variable so that the method returns index of searched data
                        int index = binarySearch(sortedPriceArray, low, high, find);

                        if (index == -1) {
                            jTextFieldSearch.setText("");
                            JOptionPane.showMessageDialog(this, "No search result found", "Notice", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            //Appending searched data into the search table
                            ArrayList searchedArray = (ArrayList) al.get(index);
                            String ID = searchedArray.get(0).toString();
                            String Name = searchedArray.get(1).toString();
                            String Category = searchedArray.get(2).toString();
                            String Author = searchedArray.get(3).toString();
                            String Edition = searchedArray.get(4).toString();
                            String price = searchedArray.get(5).toString();
                            String[] row1 = {ID, Name, Category, Author, Edition, price};
                            DefaultTableModel tblModel = (DefaultTableModel) DataRecordTable.getModel();
                            while (tblModel.getRowCount() > 0) {
                                tblModel.removeRow(0);
                            }
                            tblModel.addRow(row1);

                            jTextFieldSearch.setText("");
                            JOptionPane.showMessageDialog(this, "The searched price is " + price + " of item " + Name, "Sucess", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Error! The provided datatype isn't numeric.", "Notice", JOptionPane.INFORMATION_MESSAGE);

                    }
                }
            }

        } catch (NumberFormatException ex) {
            
            JOptionPane.showMessageDialog(this, "Enter valid input", "Error!", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_PriceSearchActionPerformed

    private void CategorySearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategorySearchActionPerformed
        try {
            String name = "";
            int count = 0;
            if (ComboBoxCategory.getSelectedItem() != "Search By Category") { // checking if the selected category is valid
                for (int i = 0; i < DataRecordTable.getRowCount(); i++) {
                    if (DataRecordTable.getValueAt(i, 2).toString().equals(ComboBoxCategory.getSelectedItem().toString())) {
                        count = count + 1;
                        name += DataRecordTable.getValueAt(i, 0).toString() + ", ";
                    }
                }
                if (count == 0) {
                    JOptionPane.showMessageDialog(rootPane, "There are no available Books  " + ComboBoxCategory.getSelectedItem() + "of this category", "Book Available of this Category", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "There are " + count + " " + ComboBoxCategory.getSelectedItem() + " available." + "\n" + "Their name are: " + name, "Available Hotel in this Rating", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "You must select a given book category", "Select an Item", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(rootPane, "Error", "Error!!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CategorySearchActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        jTextFieldSearch.setText("");
    }//GEN-LAST:event_ClearButtonActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
          //confirm dialog for exiting system
        int clearConfirmation = JOptionPane.showConfirmDialog(this, "Do you want exit the system?", "Exit", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (clearConfirmation == 0){
            this.dispose();
            JOptionPane.showMessageDialog(this,"System has been existed successfully !!.","Message",JOptionPane.INFORMATION_MESSAGE); //information display
        }else{
            JOptionPane.showMessageDialog(this,"Welcome back to BookLand!!.","Message",JOptionPane.INFORMATION_MESSAGE); //information display
        }
    }//GEN-LAST:event_ExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BookLandLabel;
    private javax.swing.JButton CategorySearch;
    private javax.swing.JButton ClearButton;
    private javax.swing.JComboBox<String> ComboBoxCategory;
    private javax.swing.JTable DataRecordTable;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JMenuItem Import;
    private javax.swing.JMenuItem ManualGuide;
    private javax.swing.JButton PriceSearch;
    private javax.swing.JButton ReturnHomeButton;
    private javax.swing.JLabel Searchlabel;
    private javax.swing.JLabel Slogan;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
}
